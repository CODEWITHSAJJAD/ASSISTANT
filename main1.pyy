from Frontend.GUI1 import(
    GraphicalUerInterFace,
    SeAssistantStatus,
    ShowTextToScreen,
    TempDirectoryPath,
    SetMcrophoneStatus,
    AnswerModifier,
    QueryModifier,
    GetMcrophoneStatus,
    GetAssistantStatus)
from Backend.Model import FirstLayerDMM
from Backend.RealtimeSearchEngine import RealtimeSearchEngine
from Backend.Automation import Automation
from Backend.Chatbot import ChatBot
from Backend.SpeechToText import SpeechRecognition
from Backend.TextToSpeech import TextToSpeech
from Backend.ImageGeneration import generate_images
from dotenv import dotenv_values
from asyncio import run
from time import sleep
import subprocess
import threading 
import json
import os
env_vars=dotenv_values(".env")
Username=env_vars.get("USERNAME")
Assistantname=env_vars.get("ASSISTANTNAME")
DefaultMessage=f'''{Username} : Hello {Assistantname}, How are You?
{Assistantname} : Welcome {Username}. I am doing well how may I help you....?'''
subprocesses=[]
Funtions=["open","close","play","system","content","google search","youtube search"]
def ShowDefaultChatIfNoChats():
    File=open(r'Data\ChatLog.json',"r",encoding='utf-8')
    if len(File.read())<5:
        with open(TempDirectoryPath('Database.data'),"w",encoding='utf-8') as file:
            file.write("")
    else:
        with open(TempDirectoryPath('Responses.data'),"w",encoding='utf-8') as file:
            file.write(DefaultMessage)
def ReadChatLogJson():
    with open(r'Data\ChatLog.json',"r",encoding='utf-8') as file:
            chatlog_data=json.load(file)
    return chatlog_data
def ChatLogIntegration():
    json_data=ReadChatLogJson()
    formatted_chatlog=""
    for entry in json_data:
        if entry["role"]=="user":
            formatted_chatlog+=f"User:{entry['content']}\n"
        elif entry["role"]=="assistant":
            formatted_chatlog+=f"Assistant:{entry['content']}\n"
    formatted_chatlog=formatted_chatlog.replace("User",Username+"")
    f0rmatted_chatlog=formatted_chatlog.replace("Assistant",Assistantname+"")
    with open (TempDirectoryPath("Database.data"),"r",encoding='utf-8') as file:
        file.write(AnswerModifier(formatted_chatlog))

def ShowChatsONGUI():
    File=open(TempDirectoryPath('Database.data'),"r",encoding='utf-8')
    Data=File.read()
    if len(str(Data))>0:
        lines=Data.split('\n')
        result='\n'.join(lines)
        File.close()
        File.write(result)
        File.close()
def InitialExecution():
    SetMcrophoneStatus("False")
    ShowTextToScreen("")
    ShowDefaultChatIfNoChats()
    ChatLogIntegration()
    ShowChatsONGUI()
InitialExecution()
def MainExecution():
    TaskExecution=False
    ImageExecution=False
    ImageGeneration=""
    SeAssistantStatus("Listening......")
    Query=SpeechRecognition()
    ShowTextToScreen(f"{Username}:{Query}")
    SeAssistantStatus("Thinking.......")
    Decision=FirstLayerDMM(Query)
    print("")
    print(f"Decision:{Decision}")
    print("")
    G=any([i for i in Decision if i.startswith("general")])
    R=any([i for i in Decision if i.startswith("realtime")])
    Merged_query=" and ".join(
        [" ".join(i.split()[1:]) for i in Decision if i.startswith("general") or i.startswith("realtime") ]
    )
    for queries in Decision:
        if "generate " in queries:
            ImageGenerationQuery=str(queries)
            ImageExecution = True
    for queries in Decision:
        if TaskExecution == False:
            if any(queries.startswith(func) for func in Funtions):
                run(Automation(list(Decision)))
                TaskExecution = True
    if ImageExecution == True:
        with open(r"Frontend\Files\ImageGeneration.data","w") as file:
            file.write(f"{ImageGenerationQuery},True")
        try:
            p1=subprocess.Popen(['python',r'Backend\ImageGeneration.py'],
                                stdout=subprocess.PIPE,stderr=subprocess.PIPE,
                                stdin=subprocess.PIPE,shell=False)
            subprocesses.append(p1)
        except Exception as e:
            print(f"Error starting ImageGeneration.py:{e}")
    if G and R or R:
        SeAssistantStatus("Searching....")
        Answer=RealtimeSearchEngine(QueryModifier(Merged_query))
        ShowTextToScreen(f"{Assistantname} : {Answer}")
        SeAssistantStatus("Answering.....")
        TextToSpeech(Answer)
        return True
    else:
        for Queries in Decision:
            if "general" in Queries:
                SeAssistantStatus("Thinking....")
                QueryFinal=Queries.replace("general ","")
                Answer=ChatBot(QueryModifier(QueryFinal))
                ShowTextToScreen(f"{Assistantname} : {Answer}")
                SeAssistantStatus("Answering.....")
                TextToSpeech(Answer)
                return True
            elif "realtime" in Queries:
                SeAssistantStatus("Searching....")
                QueryFinal=Queries.replace("realtime ","")
                Answer=RealtimeSearchEngine(QueryModifier(QueryFinal))
                ShowTextToScreen(f"{Assistantname} : {Answer}")
                SeAssistantStatus("Answering.....")
                TextToSpeech(Answer)
                return True
            elif "exit" in Queries:                
                QueryFinal="OKAY,BYE!"
                Answer=ChatBot(QueryModifier(QueryFinal))
                ShowTextToScreen(f"{Assistantname} : {Answer}")
                SeAssistantStatus("Answering.....")
                TextToSpeech(Answer)
                SeAssistantStatus("Answering.....")
                os._exit(1)
def FirstThread():
    while True:
        CurrentStatus=GetMcrophoneStatus()
        if CurrentStatus == "True":
            MainExecution()
        else:
            AIStatus = GetAssistantStatus()
            if "Available..." in AIStatus:
                sleep(0.1)
            else:
                SeAssistantStatus("Available...")
def SecondThread():
    GraphicalUerInterFace()
if __name__=="__main__":
    thread1 = threading.Thread(target=SecondThread, daemon=True)
    thread2 = threading.Thread(target=FirstThread, daemon=True)
    thread1.start()
    thread2.start()
    thread1.join()  # Wait for GUI thread to complete